<?php
defined('BASEPATH') OR exit('No direct script access allowed');
class Inscription extends CI_Controller
{
	 public function __construct()
    {
        parent::__construct();
        $this->load->helper('form');
        $this->load->view('theme/header');
    }
    public function index()
	{

		if (null!==($this->session->userdata('identifiant'))) {
            // si on a une session avec identifiant d'ouverte 
        }
		else
		{// si pas de session,
			// form_validation est une librairie qu'on charge dans l'autoload
			// les différentes règle d'accpetance paour chaque champs
			// utilisation form_validation
			/* form_validation->set_rules('1','2','3','4')
			1: nom exact dans le formulaire
			2: Nom " humain", c'est ce qu'on va utilsier lorsqu'on veut renvoyer un message d'erreur 
			3: les règles de validation
			4: ( optionnel) message d'erreur personnalisé où %s = le champ 2 donc le nom"humain"
			*/
			$this->load->model('users_model');
            $this->form_validation->set_rules('nom','Nom','trim|required|alpha_dash|encode_php_tags',
            									array(	'required'=>'%s est requi.'));
        	$this->form_validation->set_rules('prenom','Prenom','trim|required|alpha_dash|encode_php_tags|min_length[5]|max_length[20]', 
            									array(	'required'=>'%s. est requis. ',
            											'min_length'=>'%s doit contenir minimum 5 caractères. ',
            											'max_length'=>'%s doit contenir maximum 20 caractères. ',
            											));
            
            $this->form_validation->set_rules('email','Email','trim|required|encode_php_tags|valid_email|is_unique[users.email]',
            									array(	'required'=>'%s est requis. ',
            											'valid_email'=>'%s doit être une adresse valide. ',
            											'is_unique'=>'Cet %s est déjà utilisé .'
            										));
            $this->form_validation->set_rules('identifiant','Identifiant','trim|required|alpha_dash|encode_php_tags|min_length[5]|max_length[20]',
        										array(	'required'=>'%s est requis',
        												'is_unique'=>'Cet %s est déjà utilisé .',
        												'min_length'=>'%s doit contenir minimum 5 caractères. ',
            											'max_length'=>'%s doit contenir maximum 20 caractères. ',
        										));

            $this->form_validation->set_rules('mdp1','Mot de passe','trim|required|alpha_dash|encode_php_tags|min_length[5]',
            									array(	'required'=>'%s est requis. ',
            											'alpha_dash'=>'%s doit contenir des chiffres ou des lettres ou des underscores. ',
            											'min_length'=>'%s doit avoir minimum 5 caractères. '
            										));
            $this->form_validation->set_rules('mdp2','Confirmation du mot de passe','trim|required|min_length[5]|matches[mdp1]',								array(	'required'=>'%s est requis. ',
            											 'matches'=>'La confirmation du mot de passe doit être égale au mot de passe. '
            										));
        	if ($this->form_validation->run() == FALSE)
            {
            	$this->load->view('users/inscription');// en cas de non validation du formulaire on renvoi le formulaire
            }
            else
            {
        		$this->validation();
            }
    	}
    }
    public function validation()
    {
        $nom=$this->input->post('nom');
        $prenom=$this->input->post('prenom');
        $identifiant=$this->input->post('identifiant');
        $email=$this->input->post('email');
        $mdp1=$this->input->post('mdp1');
        $mdp2=$this->input->post('mdp2');
        $result= $this->users_model->insertion_users($nom,$prenom,$identifiant,$email,$mdp1);
        redirect('login');
    }

}